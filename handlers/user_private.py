from aiogram import types, Router, F
from aiogram.filters import CommandStart
import aiofiles
from filters.chat_types import ChatTypeFilter

from sqlalchemy.ext.asyncio import AsyncSession
from handlers.menu_processing import get_menu_content
from keyboards.inline_keyboard import MenuCallBack
from database.orm_qerry import orm_add_user, orm_add_to_cart
from aiogram import Bot


user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))


async def add_to_cart(
    callback: types.CallbackQuery, callback_data: MenuCallBack, session: AsyncSession
):
    user = callback.from_user
    await orm_add_user(
        session=session,
        user_id=user.id,
        first_name=user.first_name,
        last_name=user.last_name,
        phone=None,
    )
    await orm_add_to_cart(
        session=session, user_id=user.id, product_id=callback_data.product_id
    )
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")


@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message, session: AsyncSession):
    media, reply_markup = await get_menu_content(session, level=0, menu_name="main")

    await message.answer_photo(
        media.media, caption=media.caption, reply_markup=reply_markup
    )


@user_private_router.callback_query(F.data == "order_callback")
async def orderd(callback: types.CallbackQuery):
    await callback.answer(text="–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É")
    await callback.message.answer()


@user_private_router.callback_query(MenuCallBack.filter())
async def user_menu(
    callback: types.CallbackQuery,
    callback_data: MenuCallBack,
    session: AsyncSession,
):
    if callback_data.menu_name == "add_to_cart":
        await add_to_cart(callback, callback_data, session)
        return

    media, reply_markup = await get_menu_content(
        session,
        level=callback_data.level,
        menu_name=callback_data.menu_name,
        category=callback_data.category,
        page=callback_data.page,
        product_id=callback_data.product_id,
        user_id=callback.from_user.id,
    )

    await callback.message.edit_media(media=media, reply_markup=reply_markup)
    await callback.answer()


# –£–î–ê–õ–ò–¢–¨ –í–°–ï –ß–¢–û –ù–ò–ñ–ï
# @user_private_router.message(F.text.lower() == "–∫–∞—Ç–∞–ª–æ–≥")
# @user_private_router.message(Command("catalog"))
# async def menu_cmd(message: types.Message, session:AsyncSession):
#     for product in await orm_get_category_products(session): z# –¥–æ–±–∞–≤–∏—Ç—å category_id
#         await message.answer_photo(
#             product.image,
#             caption=f"<strong>{product.name}\
#             </strong> \n {product.description} \n –°—Ç–æ–∏–º–æ—Å—Ç—å:{round(product.price,2)}—Ä—É–± –∑–∞ –º–ª"
#         )
#     await message.answer("–ö–∞—Ç–∞–ª–æ–≥‚¨ÜÔ∏è")


# @user_private_router.message(F.text.lower() == "–æ –Ω–∞—Å")
# @user_private_router.message(Command("about"))
# async def about_cmd(message: types.Message):
#     await message.answer("<i>–í—ã–≤–æ–¥–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</i>")


# @user_private_router.message(
#     (F.text.lower() == "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã") | (F.text.contains("–æ–ø–ª–∞—Ç"))
# )
# @user_private_router.message(Command("payment"))
# async def payment_cmd(message: types.Message):
#     text = as_marked_section(
#         Bold("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã"),
#         "–ö–∞—Ä—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏",
#         "–ü–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É",
#         marker="‚úÖ ",
#     )

#     await message.answer(text.as_html())


# @user_private_router.message(
#     (F.text.lower().contains("–¥–æ—Å—Ç–∞–≤–∫")) | (F.text.lower() == "–≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏")
# )
# @user_private_router.message(Command("shiping"))
# async def shiping_cmd(message: types.Message):
#     context = as_marked_section(
#         Bold("–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏:"), "–ö—É—Ä—å–µ—Ä–æ–º üèéÔ∏è", "–°–∞–º–æ–≤—ã–≤–æ–∑ ü¶µ‚û°Ô∏èüçó", marker="‚úîÔ∏è"
#     )

#     await message.answer(context.as_html())


# @user_private_router.message(F.text.lower().contains("–∑–≤–æ–Ω"))
# @user_private_router.message(Command("feedback"))
# async def feedback_cmd(message: types.Message):
#     async with aiofiles.open("feedback_cal.txt", "a", encoding="utf-8") as file:
#         await file.write(
#             f"–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å {message.date}-{message.from_user.id}-{message.from_user.first_name}-{message.from_user.last_name}-{message.from_user.username}\n"
#         )
#         await message.answer("–û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª")


# @user_private_router.message(F.contact)
# async def get_contact(message: types.Message):
#     await message.answer("–Ω–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω ‚òéÔ∏è")
#     await message.answer(str(message.contact))


# @user_private_router.message(F.location)
# async def get_location(message: types.Message):
#     await message.answer("–õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
#     await message.answer(str(message.location))


# @user_private_router.message(F.text == "–î–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏")
# async def secondary_function(message: types.Message):
#     await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–∫—Ü–∏–∏:", reply_markup=secondary_function_kb)


# @user_private_router.message(F.text == "–ù–∞ –≥–ª–∞–≤–Ω—É—é")
# async def return_main_menu(message: types.Message):
#     await message.answer("<strong>–ì–ª–∞–≤–Ω–∞—è:</strong>üè†", reply_markup=start_kb)
