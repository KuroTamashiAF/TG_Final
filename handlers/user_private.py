from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command
import aiofiles
from filters.chat_types import ChatTypeFilter
from keyboards.reply_keyboard import (
    start_kb,
    secondary_function_kb,
)
from aiogram.utils.formatting import Bold, as_marked_section
from database.orm_qerry import orm_all_products
from sqlalchemy.ext.asyncio import AsyncSession



user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))


@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ —ç—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. \n " "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ =)",
        reply_markup=start_kb,
    )


@user_private_router.message(F.text.lower() == "–∫–∞—Ç–∞–ª–æ–≥")
@user_private_router.message(Command("catalog"))
async def menu_cmd(message: types.Message, session:AsyncSession):
    for product in await orm_all_products(session):
        await message.answer_photo(
            product.image,
            caption=f"<strong>{product.name}\
            </strong> \n {product.description} \n –°—Ç–æ–∏–º–æ—Å—Ç—å:{round(product.price,2)}—Ä—É–± –∑–∞ –º–ª"
        )
    await message.answer("–ö–∞—Ç–∞–ª–æ–≥‚¨ÜÔ∏è")



@user_private_router.message(F.text.lower() == "–æ –Ω–∞—Å")
@user_private_router.message(Command("about"))
async def about_cmd(message: types.Message):
    await message.answer("<i>–í—ã–≤–æ–¥–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</i>")


@user_private_router.message(
    (F.text.lower() == "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã") | (F.text.contains("–æ–ø–ª–∞—Ç"))
)
@user_private_router.message(Command("payment"))
async def payment_cmd(message: types.Message):
    text = as_marked_section(
        Bold("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã"),
        "–ö–∞—Ä—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏",
        "–ü–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É",
        marker="‚úÖ ",
    )

    await message.answer(text.as_html())


@user_private_router.message(
    (F.text.lower().contains("–¥–æ—Å—Ç–∞–≤–∫")) | (F.text.lower() == "–≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏")
)
@user_private_router.message(Command("shiping"))
async def shiping_cmd(message: types.Message):
    context = as_marked_section(
        Bold("–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏:"), "–ö—É—Ä—å–µ—Ä–æ–º üèéÔ∏è", "–°–∞–º–æ–≤—ã–≤–æ–∑ ü¶µ‚û°Ô∏èüçó", marker="‚úîÔ∏è"
    )

    await message.answer(context.as_html())


@user_private_router.message(F.text.lower().contains("–∑–≤–æ–Ω"))
@user_private_router.message(Command("feedback"))
async def feedback_cmd(message: types.Message):
    async with aiofiles.open("feedback_cal.txt", "a", encoding="utf-8") as file:
        await file.write(
            f"–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å {message.date}-{message.from_user.id}-{message.from_user.first_name}-{message.from_user.last_name}-{message.from_user.username}\n"
        )
        await message.answer("–û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª")


@user_private_router.message(F.contact)
async def get_contact(message: types.Message):
    await message.answer("–Ω–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω ‚òéÔ∏è")
    await message.answer(str(message.contact))


@user_private_router.message(F.location)
async def get_location(message: types.Message):
    await message.answer("–õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
    await message.answer(str(message.location))


@user_private_router.message(F.text == "–î–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏")
async def secondary_function(message: types.Message):
    await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–∫—Ü–∏–∏:", reply_markup=secondary_function_kb)


@user_private_router.message(F.text == "–ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def return_main_menu(message: types.Message):
    await message.answer("<strong>–ì–ª–∞–≤–Ω–∞—è:</strong>üè†", reply_markup=start_kb)
